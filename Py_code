# Importing the libraries
import numpy as np
import pandas as pd
import tensorflow as tf

# Importing the dataset
dataset=pd.read_csv('../input/german-credit-data-with-risk/german_credit_data.csv')
dataset[:] = dataset[:].fillna('nil')
dataset['Risk'] = dataset['Risk'].replace(['good'],1)
dataset['Risk'] = dataset['Risk'].replace(['bad'],0)
X=dataset.iloc[:,1:-1].values
Y=dataset.iloc[:,-1].values

# Encoding categorical data
from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
X[:,1]=le.fit_transform(X[:,1])
X[:,3]=le.fit_transform(X[:,3])
X[:,4]=le.fit_transform(X[:,4])
X[:,5]=le.fit_transform(X[:,5])
X[:,8]=le.fit_transform(X[:,8])
print(X)
print(Y)

# Splitting the dataset into the Training set and Test set
from sklearn.model_selection import train_test_split as tts
X_train,X_test, Y_train, Y_test = tts(X, Y, test_size=0.2, random_state=0)

# Feature Scaling
from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
X_train=sc.fit_transform(X_train)
X_test=sc.transform(X_test)

# Building the ANN
ann=tf.keras.models.Sequential()
ann.add(tf.keras.layers.Dense(units='6', activation='relu'))
ann.add(tf.keras.layers.Dense(units='4', activation='relu'))
ann.add(tf.keras.layers.Dense(units='1', activation='sigmoid'))

# Training the ANN
ann.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
ann.fit(X_train,Y_train, batch_size=25, epochs=100)

# Predicting the Test set results
Y_pred=ann.predict(X_test)
Y_pred=(Y_pred>0.5)
print(np.concatenate((Y_pred.reshape(len(Y_pred),1), Y_test.reshape(len(Y_test),1)),1))

# Confusion Matrix and Accuracy Score
from sklearn.metrics import confusion_matrix, accuracy_score
print('Confusion Matrix:\n',confusion_matrix(Y_test,Y_pred))
print('Accuracy Percentage:',accuracy_score(Y_test, Y_pred)*100,'%')
